class MultiplicationTable implements Runnable {
    private int number;
    public MultiplicationTable(int number) {
        this.number = number;
    }
    public void run() {
        System.out.println("Thread for " + number + " started");
        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " X " + i + " = " + (number * i));
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                System.out.println("Thread for " + number + " interrupted");
            }
        }
        System.out.println("Thread for " + number + " ended");
    }
}
public class Main {
    public static void main(String[] args) {
        Thread thread5 = new Thread(new MultiplicationTable(5));
        Thread thread10 = new Thread(new MultiplicationTable(10));
        System.out.println("Threads created");
        System.out.println("Thread state (5): " + thread5.getState());
        System.out.println("Thread state (10): " + thread10.getState());
        thread5.start();
        thread10.start();
        System.out.println("Thread state (5): " + thread5.getState());
        System.out.println("Thread state (10): " + thread10.getState());
        try {
            thread5.join();
            thread10.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Thread state (5): " + thread5.getState());
        System.out.println("Thread state (10): " + thread10.getState());
    }
}
